replicaCount: 1

image:
  repository: todo-service
  tag: v1.2
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80
  targetPort: 80
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "80"
    prometheus.io/path: "/metrics"

# Database configuration - Using connection string approach
database:
  # Option 1: Connection string (recommended for production)
  connectionString: ""  # Should be set via external secret
  
  # Option 2: Individual components (for development)
  host: ""              # Will be ignored if connectionString is set
  port: 5432
  name: "tododb"
  username: ""          # Should be set via external secret
  password: ""          # Should be set via external secret
  
  # SSL Configuration
  sslMode: "Require"    # Disable, Allow, Prefer, Require
  trustServerCertificate: false
  
  # Connection pool settings
  pooling: true
  minPoolSize: 0
  maxPoolSize: 100
  connectionLifetime: 300
  connectionTimeout: 30

# External Secret configuration (if using External Secrets Operator)
externalSecret:
  enabled: false
  secretStore:
    name: "vault-secret-store"
    kind: "SecretStore"
  target:
    name: "todo-service-db-secret"
    creationPolicy: "Owner"
  data:
    - secretKey: "POSTGRES_CONNECTION_STRING"
      remoteRef:
        key: "database/todo-service"
        property: "connection_string"

# Manual secret configuration (for development)
secrets:
  # These should be overridden in production
  postgresUser: "postgres"      # Base64 will be applied in template
  postgresPassword: "password"  # Base64 will be applied in template
  postgresConnectionString: ""  # If provided, will override individual fields

# Health checks configuration
healthChecks:
  enabled: true
  livenessProbe:
    httpGet:
      path: /health/live
      port: 80
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /health/ready
      port: 80
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1

# Resource configuration
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

# Auto-scaling configuration
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 60
  targetMemoryUtilizationPercentage: 75
  # Custom metrics (if using custom metrics API)
  customMetrics: []
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60

# Security configuration
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000
  capabilities:
    drop:
      - ALL

podSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - ALL

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Monitoring configuration
monitoring:
  enabled: true
  prometheusRule:
    enabled: true
    rules:
      - alert: TodoServiceHighErrorRate
        expr: rate(http_requests_total{job="todo-service",code=~"5.."}[5m]) > 0.1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Todo Service has high error rate"
  
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s

# Application configuration
app:
  environment: "Production"
  logLevel: "Information"
  enableSwagger: false
  cors:
    enabled: true
    origins:
      - "http://localhost:3000"
      - "https://yourdomain.com"

# Migration configuration
migration:
  enabled: true
  image:
    repository: todo-service
    tag: v1.2
    pullPolicy: IfNotPresent